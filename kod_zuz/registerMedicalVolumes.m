function [REGVOL,TFORM] = registerMedicalVolumes(MOVING,FIXED)
%registerMedicalVolumes Register medical image volumes using auto-generated code from Medical Registration Estimator app.

% Auto-generated by medicalRegistrationEstimator app on 08-Aug-2025
%------------------------------------------------------------------


% Create an array to store the cumulative transform matrices of each alignment.
alignmentTransform = zeros(4,4,1);
initialTransform = eye(4);

% Monomodal alignment
fixedRef = FIXED.VolumeGeometry;
movingRef = MOVING.VolumeGeometry;
fixedIntrinsicToWorld = intrinsicToWorldMapping(fixedRef).A;
movingIntrinsicToWorld = intrinsicToWorldMapping(movingRef).A;

% Coarse alignment or resampling of the volume
resampledMoving = resampleAffine(MOVING,fixedRef,WorldTransform=affinetform3d(initialTransform),FillValue=min(MOVING.Voxels(:)));
movIntrinsicTofixedIntrinsic = fixedIntrinsicToWorld \ (initialTransform * movingIntrinsicToWorld);

% Normalize volume
FIXED.Voxels = mat2gray(FIXED.Voxels);
resampledMoving.Voxels = mat2gray(resampledMoving.Voxels);
[optimizer, metric] = imregconfig('monomodal');
optimizer.GradientMagnitudeTolerance = 0.000100;
optimizer.MinimumStepLength = 1.000000e-05;
optimizer.MaximumStepLength = 6.250000e-02;
optimizer.MaximumIterations = 100;
optimizer.RelaxationFactor = 0.500000;

% Finer alignment using imregtform
tformAlgo = imregtform(resampledMoving.Voxels,FIXED.Voxels,'rigid',optimizer,metric,InitialTransformation=affinetform3d(initialTransform),DisplayOptimization = 1,PyramidLevels = 3);
tIntrinsicComposite = tformAlgo.A * movIntrinsicTofixedIntrinsic;
tMovingWorldToFixedWorld =  fixedIntrinsicToWorld *  tIntrinsicComposite/movingIntrinsicToWorld;
tform = affinetform3d(tMovingWorldToFixedWorld);
regVoxels = imwarp(MOVING.Voxels, affinetform3d(tIntrinsicComposite),OutputView =imref3d(FIXED.VolumeGeometry.VolumeSize),FillValue=min(MOVING.Voxels(:)));
regVol = medicalVolume(regVoxels,fixedRef);


% Store the transform of the current alignment in the cumulative list.
alignmentTransform(:,:,1) = tform.A;

% Store the final result
REGVOL = regVol;
TFORM = tform;
